// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package calculadoraProto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CalculadoraServiceClient is the client API for CalculadoraService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CalculadoraServiceClient interface {
	Sumar(ctx context.Context, in *NumbersList, opts ...grpc.CallOption) (*ResultObject, error)
	Restar(ctx context.Context, in *NumbersList, opts ...grpc.CallOption) (*ResultObject, error)
	Dividir(ctx context.Context, in *NumbersList, opts ...grpc.CallOption) (*ResultObject, error)
	Multiplicar(ctx context.Context, in *NumbersList, opts ...grpc.CallOption) (*ResultObject, error)
}

type calculadoraServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCalculadoraServiceClient(cc grpc.ClientConnInterface) CalculadoraServiceClient {
	return &calculadoraServiceClient{cc}
}

func (c *calculadoraServiceClient) Sumar(ctx context.Context, in *NumbersList, opts ...grpc.CallOption) (*ResultObject, error) {
	out := new(ResultObject)
	err := c.cc.Invoke(ctx, "/calculadora.calculadoraService/sumar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculadoraServiceClient) Restar(ctx context.Context, in *NumbersList, opts ...grpc.CallOption) (*ResultObject, error) {
	out := new(ResultObject)
	err := c.cc.Invoke(ctx, "/calculadora.calculadoraService/restar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculadoraServiceClient) Dividir(ctx context.Context, in *NumbersList, opts ...grpc.CallOption) (*ResultObject, error) {
	out := new(ResultObject)
	err := c.cc.Invoke(ctx, "/calculadora.calculadoraService/dividir", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *calculadoraServiceClient) Multiplicar(ctx context.Context, in *NumbersList, opts ...grpc.CallOption) (*ResultObject, error) {
	out := new(ResultObject)
	err := c.cc.Invoke(ctx, "/calculadora.calculadoraService/multiplicar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CalculadoraServiceServer is the server API for CalculadoraService service.
// All implementations must embed UnimplementedCalculadoraServiceServer
// for forward compatibility
type CalculadoraServiceServer interface {
	Sumar(context.Context, *NumbersList) (*ResultObject, error)
	Restar(context.Context, *NumbersList) (*ResultObject, error)
	Dividir(context.Context, *NumbersList) (*ResultObject, error)
	Multiplicar(context.Context, *NumbersList) (*ResultObject, error)
	mustEmbedUnimplementedCalculadoraServiceServer()
}

// UnimplementedCalculadoraServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCalculadoraServiceServer struct {
}

func (UnimplementedCalculadoraServiceServer) Sumar(context.Context, *NumbersList) (*ResultObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Sumar not implemented")
}
func (UnimplementedCalculadoraServiceServer) Restar(context.Context, *NumbersList) (*ResultObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Restar not implemented")
}
func (UnimplementedCalculadoraServiceServer) Dividir(context.Context, *NumbersList) (*ResultObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Dividir not implemented")
}
func (UnimplementedCalculadoraServiceServer) Multiplicar(context.Context, *NumbersList) (*ResultObject, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Multiplicar not implemented")
}
func (UnimplementedCalculadoraServiceServer) mustEmbedUnimplementedCalculadoraServiceServer() {}

// UnsafeCalculadoraServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CalculadoraServiceServer will
// result in compilation errors.
type UnsafeCalculadoraServiceServer interface {
	mustEmbedUnimplementedCalculadoraServiceServer()
}

func RegisterCalculadoraServiceServer(s grpc.ServiceRegistrar, srv CalculadoraServiceServer) {
	s.RegisterService(&CalculadoraService_ServiceDesc, srv)
}

func _CalculadoraService_Sumar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumbersList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculadoraServiceServer).Sumar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculadora.calculadoraService/sumar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculadoraServiceServer).Sumar(ctx, req.(*NumbersList))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculadoraService_Restar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumbersList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculadoraServiceServer).Restar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculadora.calculadoraService/restar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculadoraServiceServer).Restar(ctx, req.(*NumbersList))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculadoraService_Dividir_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumbersList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculadoraServiceServer).Dividir(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculadora.calculadoraService/dividir",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculadoraServiceServer).Dividir(ctx, req.(*NumbersList))
	}
	return interceptor(ctx, in, info, handler)
}

func _CalculadoraService_Multiplicar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NumbersList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CalculadoraServiceServer).Multiplicar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/calculadora.calculadoraService/multiplicar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CalculadoraServiceServer).Multiplicar(ctx, req.(*NumbersList))
	}
	return interceptor(ctx, in, info, handler)
}

// CalculadoraService_ServiceDesc is the grpc.ServiceDesc for CalculadoraService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CalculadoraService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "calculadora.calculadoraService",
	HandlerType: (*CalculadoraServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "sumar",
			Handler:    _CalculadoraService_Sumar_Handler,
		},
		{
			MethodName: "restar",
			Handler:    _CalculadoraService_Restar_Handler,
		},
		{
			MethodName: "dividir",
			Handler:    _CalculadoraService_Dividir_Handler,
		},
		{
			MethodName: "multiplicar",
			Handler:    _CalculadoraService_Multiplicar_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/calculadora.proto",
}
